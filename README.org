* My homies ese! ðŸ˜Ž

A tidy `$HOME` is a tidy mind.

[[file:assets/neofetch.png]]
[[file:assets/workflow.png]]

These are my dotfiles, designed primarily for macOS and Ubuntu (Server), heavily
inspired by [[https://github.com/hlissner/dotfiles][hlissner/dotfiles]]. They are my specific breed of madness, split into
2-level topics (e.g. =shell/zsh=) that strive for minimum ~$HOME~ presence
(adhering to XDG standards where possible).

** Quick start

#+BEGIN_SRC sh
bash <(curl -s https://raw.githubusercontent.com/eduarbo/dotfiles/master/bootstrap.sh)
#+END_SRC

** What does it include?

The following are the categories and topics available to install:

- =macos/= :: macOS compatible utilities
  - [X] =apps= :: collection of macOS apps that I use on a daily basis
  - [X] =defaults= :: bare essentials for macOS
  - [X] =hammerspoon= :: a bunch of lua scripts to boost my productivity
  - [X] =iterm= :: iTerm2, is there a better macOS terminal?
  - [X] =kitty= :: well, in fact there is a better macOS terminal
  - [X] =karabiner= :: powerful keyboard customizer

- =misc/= :: Very handy apps & tools
  - [X] =surfingkeys= :: vim-like bindings for Google Chrome
  - [ ] =tridactyl= :: vim-like bindings for Firefox

- =editor/= :: Configuration for my text editors
  - [X] =editorconfig= :: maintain consistent coding styles between different editors
  - [X] =emacs= :: the best of Emacs and Vim in one place
  - [X] =vim= :: for quick file editing

- =shell/= :: Shell utilities
  - [X] =bash= :: not my default shell but doesn't hurt to have a basic config
  - [X] =git= :: nice aliases and zsh plugins
  - [ ] =gnupg= :: encryption/signing
  - [X] =tmux= :: window manager within the terminal + nice plugins
  - [X] =zsh= :: my shell of choice, fast, powerful and with a nice prompt

# TODO Needs revision
- =dev/= :: Relevant to software development & programming in general
  - [X] =lua= :: manage lua environments with luaenv
  - [X] =node= :: setup nodenv, a lightweight alternative to nvm
  - [X] =python= :: setup pyenv, a simple Python version management


* Dotfile management

#+BEGIN_SRC text
Usage: deploy [-acdlLit] [TOPIC...]

  -a   Target all enabled topics (ignores TOPIC args)
  -c   Afterwards, remove dead symlinks & empty dot-directories in $HOME.
       Can be used alone.
  -d   Unlink and run `./_init clean` for topic(s)
  -l   Only relink topic(s) (implies -i)
  -L   List enabled topics
  -i   Inhibit install/update/clean init scripts
  -t   Do a test run; do not actually do anything
#+END_SRC

e.g.
+ =deploy misc/kitty shell/{zsh,tmux}= :: enables misc/kitty, shell/zsh & shell/tmux
+ =deploy -d shell/zsh= :: disables shell/zsh & cleans up after it
+ =deploy -l shell/zsh= :: refresh links for shell/zsh (inhibits init script)
+ =deploy -l= :: relink all enabled topics
+ =deploy -L= :: list all enabled topics

Here's a breakdown of what the script does:

#+BEGIN_SRC sh
cd $topic
if [[ -L $DOTFILES_DATA/${topic/\//.}.topic ]]; then
    ./_init update
else
    ln -sfv $DOTFILES/$topic $DOTFILES_DATA/${topic/\//.}.topic

    ./_init install
    ./_init link
fi
#+END_SRC

** Troubleshooting

*** Signing Git commit with GPG ask passphrase everytime

Make sure the GPG key ID is correct. You can get a list of GPG keys with =gpg
--list-secret-keys --keyid-format LONG= and then set it in Git with =git config
--global user.signingkey [GPG-key-ID]=.

More details in [[https://help.github.com/articles/telling-git-about-your-gpg-key/][Telling Git about your GPG key]].

** Relevant projects/resources

+ [[https://drive.google.com/drive/folders/1FRy0ZOvau2A1Rp7hU8GE0dM8O_cIKhf-][Wallpapers]] (pulled by `shell/zsh`)
+ [[https://github.com/hlissner/doom-emacs][DOOM Emacs]] (pulled by `editor/emacs`)
+ [[https://github.com/eduarbo/pacmux][Pacmux Tmux theme]] (pulled by `shell/tmux`)
+ [[https://github.com/eduarbo/simpl][Simpl ZSH prompt]] (pulled by `shell/zsh`)
